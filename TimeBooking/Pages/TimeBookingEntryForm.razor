@using TimeBooking.Data.Models
@using TimeBooking.Data.Interfaces

@inject ICustomerService CustomerService
@inject IProjectService ProjectService
@inject IProcessService ProcessService
@inject IBookingService BookingService
@inject Globals GlobalVars


<TelerikForm Model="@BookingEntry"
             OnValidSubmit="@ValidSubmit"
            >
    <FormValidation>
       
    </FormValidation>
    <FormItems>
        <FormItem Field="@nameof(DailyBookingEntry.BookingDate)"></FormItem>
        <br>
        <TelerikDropDownList Data="@Customers"
                             @bind-Value="@BookingEntry.CustomerId"
                             TextField="ClientName"
                             ValueField="ClientId"
                             DefaultText="Kunde suchen"
                             Id="customerSelected"
                             Filterable="@Filterable"
                             FilterOperator="@FilterOperator"
                             FilterDebounceDelay="@FilterDebounceDelay"
                             OnChange="() =>GetProjectsByCustomerId(BookingEntry.CustomerId)"
                             Width="100%">
            <DropDownListSettings>
                <DropDownListPopupSettings Height="auto"></DropDownListPopupSettings>
            </DropDownListSettings>
        </TelerikDropDownList>
        <br>
        <TelerikDropDownList Data="@Projects"
                             @bind-Value="@BookingEntry.ProjectId"
                             TextField="ProjectName"
                             ValueField="ProjectId"
                             DefaultText="Projekt suchen"
                             Id="projectSelected"
                             Filterable="@Filterable"
                             FilterOperator="@FilterOperator"
                             FilterDebounceDelay="@FilterDebounceDelay"
                             Width="100%"
                             OnChange="() => GetProcessesByProjectId(BookingEntry.ProjectId)"
                             >
            <DropDownListSettings>
                <DropDownListPopupSettings Height="auto"></DropDownListPopupSettings>
            </DropDownListSettings>
        </TelerikDropDownList>
        <br>
        <TelerikDropDownList Data="@Processes"
                             @bind-Value="@BookingEntry.ProcessId"
                             TextField="ProcessName"
                             ValueField="ProcessId"
                             DefaultText="Vorgang suchen"
                             Id="processSelected"
                             Filterable="@Filterable"
                             FilterOperator="@FilterOperator"
                             FilterDebounceDelay="@FilterDebounceDelay"
                             Width="100%">
            <DropDownListSettings>
                <DropDownListPopupSettings Height="auto"></DropDownListPopupSettings>
            </DropDownListSettings>
        </TelerikDropDownList>
       
       
        <FormItem Field="@nameof(DailyBookingEntry.Hours)"></FormItem>
        <FormItem Field="@nameof(DailyBookingEntry.Comment)"></FormItem>
    </FormItems>
</TelerikForm>

@code {
    //TODO: Submit process to be added
    public DailyBookingEntry? BookingEntry { get; set; }

    public List<Client>? Customers;
    public List<Project>? Projects;
    public List<Process>? Processes;

    public TimeBookingEntryForm()
    {
        BookingEntry = new DailyBookingEntry()
        {
            BookingDate = DateTime.Today.Date,
            

        };
    }

    public int FilterDebounceDelay { get; set; } = 200;
    bool Filterable { get; set; } = true;
    StringFilterOperator FilterOperator { get; set; } = StringFilterOperator.Contains;


    protected override async Task OnInitializedAsync()
    {
       

        await GetCustomers();
        

    }

    public async Task GetCustomers()
    {
        Customers = await CustomerService.GetAllActiveCustomers();
    }

    public async Task GetProjectsByCustomerId(Guid? customerId)
    {
        Projects = await ProjectService.GetProjectsByCustomerID(customerId);
        if (Processes != null )
        {
            Processes = new List<Process>();
        }
    }

    public async Task GetProcessesByProjectId(Guid? projectId)
    {
        Processes = await ProcessService.GetProcessByProjecId(projectId);
    }

    public async void ValidSubmit()
    {
        if (BookingEntry != null)
        {
            BookingEntry.EmployeeId = GlobalVars.Id;
            await BookingService.InsertBooking(BookingEntry);
        }
        GlobalVars.OpenTimeEditForm = false;
        StateHasChanged();

    }

    
   
}
