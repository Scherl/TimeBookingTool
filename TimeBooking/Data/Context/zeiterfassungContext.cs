// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using TimeBooking.Data.Models;

namespace TimeBooking.Data.Context
{
    public partial class zeiterfassungContext : DbContext
    {
        public zeiterfassungContext()
        {
        }

        public zeiterfassungContext(DbContextOptions<zeiterfassungContext> options)
            : base(options)
        {
        }


        public virtual DbSet<ActiveClient> ActiveClients { get; set; }
        public virtual DbSet<ActiveProject> AktiveProjects { get; set; }
        public virtual DbSet<ActiveProcesses> ActiveProcesses { get; set; }
        public virtual DbSet<WorkingTime> WorkingTimes { get; set; }
        public virtual DbSet<WorkloadReduction> WorkloadReductions { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<VacationWorkload> VacationWorkloads { get; set; }
        public virtual DbSet<InactiveClient> InactiveClients { get; set; }
        public virtual DbSet<InactiveProject> InactiveProjects { get; set; }
        public virtual DbSet<InactiveProcesses> InactiveProcesses { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeBalance> EmployeeBalances { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Expense> Expenses { get; set; }
        public virtual DbSet<T_Log> T_Logs { get; set; }
        public virtual DbSet<Process> Processes { get; set; }

       

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Latin1_General_CI_AS");

            modelBuilder.Entity<ActiveClient>(entity =>
            {
                entity.ToView("ActiveClients");
                
            });

            modelBuilder.Entity<ActiveProject>(entity =>
            {
                entity.ToView("ActiveProjects");
            });

            modelBuilder.Entity<ActiveProcesses>(entity =>
            {
                entity.ToView("ActiveProcesses");
            });

            modelBuilder.Entity<WorkingTime>(entity =>
            {
                entity.Property(e => e.WorkingTimeId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DailyWorkingTime).HasDefaultValueSql("((8))");
            });

            modelBuilder.Entity<WorkloadReduction>(entity =>
            {
                entity.Property(e => e.ReductionId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Booking>(entity =>
            {
                entity.Property(e => e.BookingId).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Booking_Employee");

                entity.HasOne(d => d.Process)
                    .WithMany(p => p.Bookings)
                    .HasForeignKey(d => d.ProcessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Booking_Process");
            });

            modelBuilder.Entity<VacationWorkload>(entity =>
            {
                entity.Property(e => e.VacationWorkloadId).ValueGeneratedNever();

                entity.Property(e => e.Workload).HasDefaultValueSql("((100))");

                entity.Property(e => e.Tuesday).HasDefaultValueSql("((1))");

                entity.Property(e => e.Thursday).HasDefaultValueSql("((1))");

                entity.Property(e => e.VacationPerYear).HasDefaultValueSql("((25))");

                entity.Property(e => e.Friday).HasDefaultValueSql("((1))");

                entity.Property(e => e.Wednesday).HasDefaultValueSql("((1))");

                entity.Property(e => e.Monday).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.VacationWorkloads)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VacationWorkload_Employee");
            });

            modelBuilder.Entity<InactiveClient>(entity =>
            {
                entity.ToView("InactiveClients");
            });

            modelBuilder.Entity<InactiveProject>(entity =>
            {
                entity.ToView("InactiveProjects");
            });

            modelBuilder.Entity<InactiveProcesses>(entity =>
            {
                entity.ToView("InactiveProcesses");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.Property(e => e.ClientId).ValueGeneratedNever();

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.EmployeeId).ValueGeneratedNever();
                
            });

            modelBuilder.Entity<EmployeeBalance>(entity =>
            {
                entity.Property(e => e.EmployeeBalanceId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.Property(e => e.ProjectId).ValueGeneratedNever();

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Project_Client");

            });

            modelBuilder.Entity<Expense>(entity =>
            {
                entity.Property(e => e.ExpenseId).ValueGeneratedNever();

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Expenses)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Expense_Employee");
            });

            modelBuilder.Entity<Process>(entity =>
            {
                entity.Property(e => e.ProcessId).ValueGeneratedNever();

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.Processes)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Process_Project");
            });

            modelBuilder.Seed();

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

      
    }
}