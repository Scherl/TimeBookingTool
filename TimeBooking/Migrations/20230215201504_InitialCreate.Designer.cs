// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeBooking.Data.Context;

#nullable disable

namespace TimeBooking.Migrations
{
    [DbContext(typeof(zeiterfassungContext))]
    [Migration("20230215201504_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeBooking.Data.Models.AktiveKunden", b =>
                {
                    b.Property<string>("Adresse")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<bool?>("Intern")
                        .HasColumnType("bit");

                    b.Property<Guid?>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KundeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable((string)null);

                    b.ToView("AktiveKunden", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.AktiveProjekte", b =>
                {
                    b.Property<bool?>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Gesamtkosten")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<Guid?>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Pauschal")
                        .HasColumnType("bit");

                    b.Property<string>("ProjektBezeichnung")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ProjektId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjektNummer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Vertragsdauer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable((string)null);

                    b.ToView("AktiveProjekte", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.AktiveVorgaenge", b =>
                {
                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<bool>("Ferien")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjektId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Stundenansatz")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("VorgangBezeichnung")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("VorgangId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("AktiveVorgaenge", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Arbeitszeit", b =>
                {
                    b.Property<Guid>("ArbeitszeitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Arbeitszeit1")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("Arbeitszeit");

                    b.Property<int>("Jahr")
                        .HasColumnType("int");

                    b.Property<int>("Monat")
                        .HasColumnType("int");

                    b.Property<decimal>("Tagesarbeitszeit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 2)")
                        .HasDefaultValueSql("((8))");

                    b.HasKey("ArbeitszeitId");

                    b.HasIndex(new[] { "Jahr", "Monat" }, "UK_Arbeitszeit")
                        .IsUnique();

                    b.ToTable("Arbeitszeit");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.ArbeitszeitReduktion", b =>
                {
                    b.Property<Guid>("ReduktionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Reduktion")
                        .HasColumnType("numeric(3, 2)");

                    b.HasKey("ReduktionId");

                    b.HasIndex(new[] { "Datum" }, "UK_ArbeitszeitReduktion")
                        .IsUnique();

                    b.ToTable("ArbeitszeitReduktion");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Buchung", b =>
                {
                    b.Property<Guid>("BuchungId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BuchungDatum")
                        .HasColumnType("datetime");

                    b.Property<string>("BuchungText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("BuchungZeitBis")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BuchungZeitVon")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MitarbeiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Stunden")
                        .HasColumnType("bit");

                    b.Property<Guid>("VorgangId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BuchungId");

                    b.HasIndex("MitarbeiterId");

                    b.HasIndex("VorgangId");

                    b.ToTable("Buchung");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.FerienArbeitspensum", b =>
                {
                    b.Property<Guid>("FerienArbeitspensumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Arbeitspensum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3, 0)")
                        .HasDefaultValueSql("((100))");

                    b.Property<bool?>("Dienstag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Donnerstag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("FerienProJahr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3, 0)")
                        .HasDefaultValueSql("((25))");

                    b.Property<bool?>("Freitag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("GueltigAb")
                        .HasColumnType("datetime");

                    b.Property<Guid>("MitarbeiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Mittwoch")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Montag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("FerienArbeitspensumId");

                    b.HasIndex(new[] { "MitarbeiterId", "GueltigAb" }, "UK_FerienArbeitspensum")
                        .IsUnique();

                    b.ToTable("FerienArbeitspensum");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.InaktiveKunden", b =>
                {
                    b.Property<string>("Adresse")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<bool>("Intern")
                        .HasColumnType("bit");

                    b.Property<Guid>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KundeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable((string)null);

                    b.ToView("InaktiveKunden", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.InaktiveProjekte", b =>
                {
                    b.Property<bool?>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<decimal>("Gesamtkosten")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<Guid>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Pauschal")
                        .HasColumnType("bit");

                    b.Property<string>("ProjektBezeichnung")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProjektId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjektNummer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Vertragsdauer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable((string)null);

                    b.ToView("InaktiveProjekte", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.InaktiveVorgaenge", b =>
                {
                    b.Property<bool?>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<bool>("Ferien")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjektId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Stundenansatz")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("VorgangBezeichnung")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("VorgangId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("InaktiveVorgaenge", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Kunde", b =>
                {
                    b.Property<Guid>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresse")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Aktiv")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Intern")
                        .HasColumnType("bit");

                    b.Property<string>("KundeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("KundeId");

                    b.ToTable("Kunde");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Mitarbeiter", b =>
                {
                    b.Property<Guid>("MitarbeiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Austritt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Eintritt")
                        .HasColumnType("datetime");

                    b.Property<string>("MitarbeiterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MitarbeiterVorname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MitarbeiterId");

                    b.ToTable("Mitarbeiter");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.MitarbeiterSaldo", b =>
                {
                    b.Property<Guid>("MitarbeiterSaldoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("FerienSaldo")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal>("Ist")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int>("Jahr")
                        .HasColumnType("int");

                    b.Property<Guid>("MitarbeiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Monat")
                        .HasColumnType("int");

                    b.Property<decimal>("Soll")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal>("StundenSaldo")
                        .HasColumnType("numeric(18, 2)");

                    b.HasKey("MitarbeiterSaldoId");

                    b.HasIndex(new[] { "MitarbeiterId", "Jahr", "Monat" }, "UK_MitarbeiterSaldo")
                        .IsUnique();

                    b.ToTable("MitarbeiterSaldo");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Projekt", b =>
                {
                    b.Property<Guid>("ProjektId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Aktiv")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Gesamtkosten")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<Guid>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Mehrwertsteuer")
                        .HasColumnType("bit");

                    b.Property<bool>("Pauschal")
                        .HasColumnType("bit");

                    b.Property<string>("ProjektBezeichnung")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProjektNummer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Vertragsdauer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProjektId");

                    b.HasIndex("KundeId");

                    b.ToTable("Projekt");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Spesen", b =>
                {
                    b.Property<Guid>("SpesenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnlassOrt")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Betrag")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime");

                    b.Property<bool>("Kreditkarte")
                        .HasColumnType("bit");

                    b.Property<Guid>("MitarbeiterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Spesenart")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SpesenId");

                    b.HasIndex("MitarbeiterId");

                    b.ToTable("Spesen");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.T_Log", b =>
                {
                    b.Property<string>("Benutzer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Computer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logger")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Thread")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("T_Log");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Vorgang", b =>
                {
                    b.Property<Guid>("VorgangId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Aktiv")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("AnzahlStunden")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("Ferien")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjektId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Stundenansatz")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("VorgangBezeichnung")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("VorgangId");

                    b.HasIndex("ProjektId");

                    b.ToTable("Vorgang");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Buchung", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Mitarbeiter", "Mitarbeiter")
                        .WithMany("Buchungs")
                        .HasForeignKey("MitarbeiterId")
                        .IsRequired()
                        .HasConstraintName("FK_Buchung_Mitarbeiter");

                    b.HasOne("TimeBooking.Data.Models.Vorgang", "Vorgang")
                        .WithMany("Buchungs")
                        .HasForeignKey("VorgangId")
                        .IsRequired()
                        .HasConstraintName("FK_Buchung_Vorgang");

                    b.Navigation("Mitarbeiter");

                    b.Navigation("Vorgang");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.FerienArbeitspensum", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Mitarbeiter", "Mitarbeiter")
                        .WithMany("FerienArbeitspensums")
                        .HasForeignKey("MitarbeiterId")
                        .IsRequired()
                        .HasConstraintName("FK_FerienArbeitspensum_Mitarbeiter");

                    b.Navigation("Mitarbeiter");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Projekt", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Kunde", "Kunde")
                        .WithMany("Projekts")
                        .HasForeignKey("KundeId")
                        .IsRequired()
                        .HasConstraintName("FK_Projekt_Kunde");

                    b.Navigation("Kunde");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Spesen", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Mitarbeiter", "Mitarbeiter")
                        .WithMany("Spesens")
                        .HasForeignKey("MitarbeiterId")
                        .IsRequired()
                        .HasConstraintName("FK_Spesen_Mitarbeiter");

                    b.Navigation("Mitarbeiter");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Vorgang", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Projekt", "Projekt")
                        .WithMany("Vorgangs")
                        .HasForeignKey("ProjektId")
                        .IsRequired()
                        .HasConstraintName("FK_Vorgang_Projekt");

                    b.Navigation("Projekt");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Kunde", b =>
                {
                    b.Navigation("Projekts");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Mitarbeiter", b =>
                {
                    b.Navigation("Buchungs");

                    b.Navigation("FerienArbeitspensums");

                    b.Navigation("Spesens");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Projekt", b =>
                {
                    b.Navigation("Vorgangs");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Vorgang", b =>
                {
                    b.Navigation("Buchungs");
                });
#pragma warning restore 612, 618
        }
    }
}
