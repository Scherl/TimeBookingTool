// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeBooking.Data.Context;

#nullable disable

namespace TimeBooking.Migrations
{
    [DbContext(typeof(zeiterfassungContext))]
    [Migration("20230320220854_BookingCorrection")]
    partial class BookingCorrection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TimeBooking.Data.Models.ActiveClient", b =>
                {
                    b.Property<string>("Adresse")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<bool?>("Intern")
                        .HasColumnType("bit");

                    b.Property<Guid?>("KundeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KundeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable((string)null);

                    b.ToView("ActiveClients", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.ActiveProcesses", b =>
                {
                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("IsActiv")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVacation")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("ActiveProcesses", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.ActiveProject", b =>
                {
                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientNummer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContractDuration")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActiv")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFlatRate")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("TotalCosts")
                        .HasColumnType("numeric(18, 2)");

                    b.ToTable((string)null);

                    b.ToView("ActiveProjects", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookingComment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BookingFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BookingTill")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Hours")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("2d17732c-1141-470a-977b-7861fa28e719"),
                            BookingComment = "Test Comment 1",
                            BookingDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingFrom = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            BookingTill = new DateTime(1970, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            Hours = true,
                            ProcessId = new Guid("174793b3-cd31-412f-ab1c-97edfa65aa90")
                        },
                        new
                        {
                            BookingId = new Guid("171e5fae-a9cb-4c80-b09b-0bbdb088c925"),
                            BookingComment = "Test Comment 2",
                            BookingDate = new DateTime(2023, 3, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingFrom = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            BookingTill = new DateTime(1970, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            Hours = true,
                            ProcessId = new Guid("a944d35d-67ba-4475-b8ef-c262113c8905")
                        },
                        new
                        {
                            BookingId = new Guid("961816cf-3951-4622-8e25-03cd6e1b47bb"),
                            BookingComment = "Test Comment 3",
                            BookingDate = new DateTime(2023, 3, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingFrom = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            BookingTill = new DateTime(1970, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            Hours = true,
                            ProcessId = new Guid("8cebca44-c691-4be2-b6d3-ab9d742f8cf2")
                        },
                        new
                        {
                            BookingId = new Guid("518d09bd-7a7d-4e22-86b4-abfe0a9c768d"),
                            BookingComment = "Test Comment 4",
                            BookingDate = new DateTime(2023, 3, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingFrom = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            BookingTill = new DateTime(1970, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            Hours = true,
                            ProcessId = new Guid("81a7e9bd-d189-44ac-9721-01f5e0d77712")
                        },
                        new
                        {
                            BookingId = new Guid("0716a8e8-d57f-4682-a790-e67850011549"),
                            BookingComment = "Test Comment 5",
                            BookingDate = new DateTime(2023, 3, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            BookingFrom = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            BookingTill = new DateTime(1970, 1, 1, 6, 0, 0, 0, DateTimeKind.Utc),
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            Hours = true,
                            ProcessId = new Guid("be1e8984-5cd3-43b1-b5a7-53a7010d52a5")
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("fdbae1d7-75ef-4fea-9bf2-23a289ad8c9d"),
                            Address = "Gasse 1, 3303 Jegenstorf",
                            ClientName = "TestClient 1",
                            IsActive = true,
                            IsInternal = false
                        },
                        new
                        {
                            ClientId = new Guid("8d80e514-e7b1-4b1c-b2f8-c68ecfddf321"),
                            Address = "TestStrasse 5, 3001 Bern",
                            ClientName = "TestClient 2",
                            IsActive = true,
                            IsInternal = false
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Entry")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            EmployeeFirstName = "Bernd",
                            EmployeeLastName = "Brot",
                            Entry = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            EmployeeId = new Guid("a58e04bc-6126-4eec-a014-42a73c076322"),
                            EmployeeFirstName = "Anke",
                            EmployeeLastName = "Müller",
                            Entry = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        },
                        new
                        {
                            EmployeeId = new Guid("a008b4c0-88ca-47c1-8630-291d9ee15853"),
                            EmployeeFirstName = "Peter",
                            EmployeeLastName = "Meier",
                            Entry = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.EmployeeBalance", b =>
                {
                    b.Property<Guid>("EmployeeBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Actual")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("HourBalance")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("Target")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal>("VacationBalance")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("EmployeeBalanceId");

                    b.HasIndex(new[] { "EmployeeId", "Year", "Month" }, "UK_EmployeeBalance")
                        .IsUnique();

                    b.ToTable("EmployeeBalance");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Expense", b =>
                {
                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("CreditCard")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OccasionLocation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ExpenseId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            ExpenseId = new Guid("629bfa9d-7b6b-42e3-823f-a92d98fead7d"),
                            Amount = 10.10m,
                            CreditCard = false,
                            Date = new DateTime(2023, 3, 15, 23, 8, 54, 687, DateTimeKind.Local).AddTicks(143),
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            ExpenseType = "Parkgebühr",
                            OccasionLocation = "Sitzung Bern"
                        },
                        new
                        {
                            ExpenseId = new Guid("661814e4-e401-4b62-8e71-1ab9f798dc51"),
                            Amount = 10.10m,
                            CreditCard = false,
                            Date = new DateTime(2023, 3, 18, 23, 8, 54, 687, DateTimeKind.Local).AddTicks(147),
                            EmployeeId = new Guid("a58e04bc-6126-4eec-a014-42a73c076322"),
                            ExpenseType = "Rückerstattung",
                            OccasionLocation = "Wasser"
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.InactiveClient", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.ToTable((string)null);

                    b.ToView("InactiveClients", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.InactiveProcesses", b =>
                {
                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVacation")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable((string)null);

                    b.ToView("InactiveProcesses", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.InactiveProject", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractDuration")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("TotalCosts")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("isFlatRate")
                        .HasColumnType("bit");

                    b.ToTable((string)null);

                    b.ToView("InactiveProjects", (string)null);
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Process", b =>
                {
                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("AmountHours")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjektId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Vacation")
                        .HasColumnType("bit");

                    b.HasKey("ProcessId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            ProcessId = new Guid("174793b3-cd31-412f-ab1c-97edfa65aa90"),
                            Active = true,
                            AmountHours = 100.00m,
                            HourlyRate = 150.00m,
                            ProcessName = "TestProcess 1",
                            ProjectId = new Guid("2dae18c8-e528-4870-b691-f1df3e7e5319"),
                            Vacation = false
                        },
                        new
                        {
                            ProcessId = new Guid("a944d35d-67ba-4475-b8ef-c262113c8905"),
                            Active = true,
                            AmountHours = 20.00m,
                            HourlyRate = 150.00m,
                            ProcessName = "TestProcess 2",
                            ProjectId = new Guid("2dae18c8-e528-4870-b691-f1df3e7e5319"),
                            Vacation = false
                        },
                        new
                        {
                            ProcessId = new Guid("8cebca44-c691-4be2-b6d3-ab9d742f8cf2"),
                            Active = true,
                            AmountHours = 20.00m,
                            HourlyRate = 50.00m,
                            ProcessName = "TestProcess 3",
                            ProjectId = new Guid("2dae18c8-e528-4870-b691-f1df3e7e5319"),
                            Vacation = false
                        },
                        new
                        {
                            ProcessId = new Guid("81a7e9bd-d189-44ac-9721-01f5e0d77712"),
                            Active = true,
                            AmountHours = 100.00m,
                            HourlyRate = 160.00m,
                            ProcessName = "TestProcess 1a",
                            ProjectId = new Guid("44c56bd8-c2cb-4bfa-b7fa-800188d59fa6"),
                            Vacation = false
                        },
                        new
                        {
                            ProcessId = new Guid("be1e8984-5cd3-43b1-b5a7-53a7010d52a5"),
                            Active = true,
                            AmountHours = 150.00m,
                            HourlyRate = 200.00m,
                            ProcessName = "TestProcess 2a",
                            ProjectId = new Guid("44c56bd8-c2cb-4bfa-b7fa-800188d59fa6"),
                            Vacation = false
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractDuration")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsFlatRate")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProjectNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("TotalCosts")
                        .HasColumnType("numeric(18, 2)");

                    b.Property<bool>("VAT")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("2dae18c8-e528-4870-b691-f1df3e7e5319"),
                            ClientId = new Guid("fdbae1d7-75ef-4fea-9bf2-23a289ad8c9d"),
                            ContractDuration = "2023",
                            IsActive = true,
                            IsFlatRate = true,
                            ProjectName = "TestProject 1",
                            ProjectNumber = "12345",
                            TotalCosts = 50000.00m,
                            VAT = true
                        },
                        new
                        {
                            ProjectId = new Guid("44c56bd8-c2cb-4bfa-b7fa-800188d59fa6"),
                            ClientId = new Guid("8d80e514-e7b1-4b1c-b2f8-c68ecfddf321"),
                            ContractDuration = "2025",
                            IsActive = true,
                            IsFlatRate = true,
                            ProjectName = "TestProject 2",
                            ProjectNumber = "16987",
                            TotalCosts = 100000.00m,
                            VAT = true
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.T_Log", b =>
                {
                    b.Property<string>("Benutzer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Computer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logger")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Thread")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("T_Log");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.VacationWorkload", b =>
                {
                    b.Property<Guid>("VacationWorkloadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Friday")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Monday")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Thursday")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("Tuesday")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("VacationPerYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3, 0)")
                        .HasDefaultValueSql("((25))");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Wednesday")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Workload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(3, 0)")
                        .HasDefaultValueSql("((100))");

                    b.HasKey("VacationWorkloadId");

                    b.HasIndex(new[] { "EmployeeId", "ValidFrom" }, "UK_VacationWorkload")
                        .IsUnique();

                    b.ToTable("VacationWorkload");

                    b.HasData(
                        new
                        {
                            VacationWorkloadId = new Guid("0ac23686-0de0-4a02-ae9b-913a030e2ed0"),
                            EmployeeId = new Guid("757f0271-5819-44f3-a4f4-2a4a97149c71"),
                            Friday = true,
                            Monday = true,
                            Thursday = true,
                            Tuesday = true,
                            VacationPerYear = 25.00m,
                            ValidFrom = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Wednesday = true,
                            Workload = 100.00m
                        },
                        new
                        {
                            VacationWorkloadId = new Guid("288a7251-6b98-4bd9-84ce-7a0d4b89b5f9"),
                            EmployeeId = new Guid("a58e04bc-6126-4eec-a014-42a73c076322"),
                            Friday = true,
                            Monday = true,
                            Thursday = true,
                            Tuesday = true,
                            VacationPerYear = 30.00m,
                            ValidFrom = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Wednesday = true,
                            Workload = 80.00m
                        },
                        new
                        {
                            VacationWorkloadId = new Guid("66c0f1df-bdb2-4f9e-9258-cd4f1c0935ff"),
                            EmployeeId = new Guid("a008b4c0-88ca-47c1-8630-291d9ee15853"),
                            Friday = true,
                            Monday = true,
                            Thursday = true,
                            Tuesday = true,
                            VacationPerYear = 25.00m,
                            ValidFrom = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Wednesday = true,
                            Workload = 100.00m
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.WorkingTime", b =>
                {
                    b.Property<Guid>("WorkingTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("DailyWorkingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 2)")
                        .HasDefaultValueSql("((8))");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("WorkingTime1")
                        .HasColumnType("numeric(18, 2)")
                        .HasColumnName("WorkingTime");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("WorkingTimeId");

                    b.HasIndex(new[] { "Year", "Month" }, "UK_WorkingTime")
                        .IsUnique();

                    b.ToTable("WorkingTime");

                    b.HasData(
                        new
                        {
                            WorkingTimeId = new Guid("2694dd4d-08bc-4225-9a68-800ff82fab09"),
                            DailyWorkingTime = 8.00m,
                            Month = 3,
                            WorkingTime1 = 64.00m,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("TimeBooking.Data.Models.WorkloadReduction", b =>
                {
                    b.Property<Guid>("ReductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Reduction")
                        .HasColumnType("numeric(3, 2)");

                    b.HasKey("ReductionId");

                    b.HasIndex(new[] { "Date" }, "UK_WorkloadReduction")
                        .IsUnique();

                    b.ToTable("WorkloadReduction");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Booking", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Employee", "Employee")
                        .WithMany("Bookings")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Employee");

                    b.HasOne("TimeBooking.Data.Models.Process", "Process")
                        .WithMany("Bookings")
                        .HasForeignKey("ProcessId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Process");

                    b.Navigation("Employee");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Expense", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Employee", "Employee")
                        .WithMany("Expenses")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Expense_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Process", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Project", "Project")
                        .WithMany("Processes")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Process_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Project", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Project_Client");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.VacationWorkload", b =>
                {
                    b.HasOne("TimeBooking.Data.Models.Employee", "Employee")
                        .WithMany("VacationWorkloads")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_VacationWorkload_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Employee", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Expenses");

                    b.Navigation("VacationWorkloads");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Process", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("TimeBooking.Data.Models.Project", b =>
                {
                    b.Navigation("Processes");
                });
#pragma warning restore 612, 618
        }
    }
}
